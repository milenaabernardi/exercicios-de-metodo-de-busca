#include <iostream>
#include <vector>
using namespace std;

// exercício 1
int buscaSequencial(const vector<int>& v, int x){
    for (int j = 0; j < v.size() - 1; ++j){
        if (v[j] < x && x <= v[j + 1]){
            return j;
        }
    }
    return -1;
}

// exercício 2
int buscaBinaria(const vector<int>& v, int x){
    int left = 0;
    int right = v.size() - 1;
    while (left <= right){
        int mid = left + (right - left) / 2;
        if (v[mid - 1] <= x && x <= v[mid]){
            return mid;
        } else if (v[mid] < x){
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1;
}

// exercício 3
int buscaSequencialRecursiva(const vector<int>& v, int x, int j){
    if (j >= v.size() - 1 || v[j] < x && x <= v[j + 1]){
        return j;
    }
    return buscaSequencialRecursiva(v, x, j + 1);
}

// exercício 4
int buscaBinariaModificada(const vector<int>& v, int x){
    int left = 0;
    int right = v.size() - 1;
    int result = -1;
    while (left <= right){
        int mid = left + (right - left) / 2;
        if (v[mid] >= x){
            result = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return result;
}

// exercício 5
pair<int, int> duasSoma(const vector<int>& v, int t){
    int left = 0;
    int right = v.size() - 1;
    while (left < right){
        int sum = v[left] + v[right];
        if (sum == t){
            return make_pair(left, right);
        } else if (sum < t){
            left++;
        } else{
            right--;
        }
    }
    return make_pair(-1, -1);
}

int main(){
    vector<int> v = {2, 3, 5, 7, 11, 13, 17, 19, 23};

    // teste dos exercícios
    int x = 6

